"use strict";

// keyboard
var keyboardButtons = document.querySelectorAll(".keyboard__btn");

// TYPABLE AREA
var typableChars = document.querySelectorAll(".typable__char");

// lang btn
var langBtns = document.querySelectorAll(".lang-ctrls__btn");
var languageButtons = document.querySelector(".lang-ctrls__body");

// START TYPING btn
var beginButton = document.getElementById("beginBtn");

// TEXT AREA
// textArea wrapper
var wrpTextArea = document.querySelector(".inputText");
// show textArea
var btnShow = document.getElementById("btnTextArea");
// insert from textArea
var btnTextAdding = document.getElementById("btnAddText");
// radio
var radioLang = document.querySelectorAll('input[name="langSelect"]');
// textarea
var elemTextArea = document.querySelector("textarea");

// clock
var clock = document.querySelector(".clock__time");
// timer
var speed = document.querySelector(".results__value--speed");
var errors = document.querySelector(".results__value--errors");

// modal
var modal = document.querySelector(".modal");
var modalP = document.querySelector(".modal > p");

// user
var user = document.getElementById("inputUsersNameID");
var sbmt = document.getElementById("submitUsersNameID");
// user-list
// const userList = document.querySelectorAll(".user-list");
// let userListScores;
var userListParent = document.querySelector(".user-list");
// const userNames = document.querySelectorAll(".user-list__name");
var sectionUser = document.querySelector(".user");
var userId = void 0; // document.getElementById('id-User');
'use strict';

var appData = {
    currentSetting: {
        lang: 'en',
        setKeyboard: function setKeyboard() {
            return appData.language[appData.currentSetting.lang];
        },
        setTypingText: function setTypingText() {
            return appData.typingText[appData.currentSetting.lang];
        }
    },
    currentType: {
        type: -1,
        text: '',
        errors: 0,
        position: 0
    },
    interval: 0,
    language: {
        en: "qwertyuiop[]asdfghjkl;'zxcvbnm,./ ",
        ua: "йцукенгшщзхїфівапролджєячсмитьбю. ",
        ru: "йцукенгшщзхъфывапролджэячсмитьбю. "
    },
    records: {},
    results: [],
    timerCurrent: 0,
    typingText: {
        en: "q we",
        ua: "хвацький юшковар філіп щодня готує сім'ї вечерю з жаб.",
        ru: "съешь же ещё этих мягких французских булок, да выпей чаю."
    },
    // currentUser
    userCurrent: {
        id: 'id-User',
        restID: -1,
        name: 'User',
        score: 0
    },
    // savedUser
    userSaved: false,
    url: 'http://fecore.net.ua/rest/'
};
"use strict";

init();
// addListeners();
"use strict";

var timer = {
    startTime: 0,
    stopTime: 0,
    interval: 0,

    start: function start() {
        this.startTime = new Date();
        this.interval = setInterval(function () {
            var tmp = new Date();
            var delta = tmp.getTime() - timer.startTime.getTime();
            var sec = dateFormat(delta);
            showTimer(sec);
        }, 40);
    },

    stop: function stop() {
        this.stopTime = new Date();
        var delta = this.stopTime.getTime() - this.startTime.getTime();
        var sec = dateFormat(delta);
        showTimer(sec);
        clearInterval(this.interval);
        this.startTime = 0;
        this.stopTime = 0;
        this.interval = 0;
        return sec;
    }
};
'use strict';

function addListeners() {

    activeBtn();

    /* ======================== смена языка раскладки ====================== */
    languageButtons.addEventListener('click', resetKeyboardLetters);

    /* ============= добавить пользователя ====================== */
    sbmt.addEventListener('click', addUser);

    /* ============= показать скрытое окно для ввода текста ============= */
    btnShow.addEventListener('click', showTextArea);

    /* ============= добавить новый текст ============= */
    btnTextAdding.addEventListener('click', setNewPhrase);

    /* ========================= начинаем сравнение кликов клавиш с текстом ========== */
    beginButton.addEventListener('click', beginType);
}
'use strict';

function addUser(e) {
    // TODO сделать проверку на уникальность имени
    e.preventDefault();
    var name = user.value;
    sectionUser.style.display = 'none';
    userId = document.getElementById('id-User');
    userId.textContent = name;
    paintUserScore();
    appData.userCurrent.name = name;
    appData.userCurrent.score = userId.nextSibling.textContent;
    createREST(appData.userCurrent);
    save('thisUser', appData.userCurrent);
}
'use strict';

function beginType() {
    // beginType () flag = true  -> stopType() flag = false
    // appData.currentType.typing = true;

    // beginType() add listener -> stopType() remove listener
    document.addEventListener('keypress', checkKey);

    //
    removeListeners();

    // beginType () appData.timer.start -> stopType() appData.timer.stop
    // appData.timer.start = window.performance.now();
    // console.log(appData.timer.start);


    // array из строки для проверки - pop()
    var tmp = appData.currentSetting.setTypingText();
    appData.currentType.text = tmp.split('').reverse();
    // console.log(appData.currentType.text);

    //timer
    timer.start();

    // Errors - показать текущее состояние
    errors.textContent = appData.currentType.errors;

    modal.style.transform = 'translateY(-110%)';
    modalP.textContent = '';
}
'use strict';

function checkKey(event) {
    // event.key

    var length = appData.currentType.text.length;

    if (length > 0) {
        // console.log(appData.currentType.text);
        if (appData.currentType.text[length - 1] === event.key) {
            nextTypeSymbol();
            appData.currentType.text.pop();
            var last = appData.currentType.text.length;
            // console.log(tmp);
            lightButton(appData.currentType.text[last - 1]);
            if (length === 1) {
                stopType();
            }
        } else {
            ++appData.currentType.errors;
            errorTypeSymbol();
        }

        return true;
    }
    return 'Error: appData.currentType.text.length = ' + appData.currentType.text.length;
}
'use strict';

function removeListeners() {
    // console.log('remove listeners');

    /* ======================== смена языка раскладки ====================== */
    languageButtons.removeEventListener('click', resetKeyboardLetters);

    /* ============= добавить пользователя ====================== */
    sbmt.removeEventListener('click', addUser);

    /* ============= показать скрытое окно для ввода текста ============= */
    btnShow.removeEventListener('click', showTextArea);

    /* ============= добавить новый текст ============= */
    btnTextAdding.removeEventListener('click', setNewPhrase);

    /* ========================= начинаем сравнение кликов клавиш с текстом ========== */
    beginButton.removeEventListener('click', beginType);

    desactiveBtn();
}
'use strict';

function resetKeyboardLetters(e) {
    appData.currentSetting.lang = e.target.textContent;
    setKeyboardLetters(appData.currentSetting.setKeyboard(), keyboardButtons);
    Array.from(langBtns, function (elem) {
        return elem.classList.remove('lang-ctrls__btn--active');
    });
    e.target.classList.add('lang-ctrls__btn--active');
    fillTypableChars(typableChars, appData.currentSetting.setTypingText());
    hideTypeElements(typableChars, appData.currentSetting.setTypingText());
    // clear();

    var text = appData.currentSetting.setTypingText();
    // подсветка текущей буквы
    // console.log(text);
    lightButton(text[0]);
}
'use strict';

function stopType() {

    document.removeEventListener('keypress', checkKey);

    addListeners();

    //timer
    var resultTime = timer.stop().split(':');
    appData.timerCurrent = +resultTime[0] + +resultTime[1] / 1000;

    // Расчитать Score  и показать на странице,
    var currentTextLength = appData.typingText[appData.currentSetting.lang].length;
    var currentScore = getScore(appData.timerCurrent, currentTextLength);
    speed.textContent = currentScore;

    // сравнить Score, перезаписать результаты
    if (appData.currentType.errors === 0) {
        // userScore.score = scr > userScore.score ? scr : userScore.score;
        if (currentScore > appData.userCurrent.score) {
            appData.userCurrent.score = currentScore;
            // console.log(`${currentScore}`);
            getRESTIdUser();
            save('thisUser', appData.userCurrent);
            updateREST(appData.userCurrent);
        }
        userId.nextSibling.textContent = appData.userCurrent.score;
        // пройтись по списку проверить score , переместить
        updateListByScore();
    }

    // Модальное окно при завершении
    modal.style.transform = 'translateY(-25%)';
    modalP.textContent = 'Fin';

    // Показать Errors на странице и обнулить
    appData.currentType.errors = 0;

    restoreView();
}
"use strict";

// key =  'thisUser'

function load(key) {
    return JSON.parse(localStorage.getItem(key));
}
"use strict";

// key =  'thisUser'

function remove(key) {
    localStorage.removeItem(key);
    // localStorage.removeItem('thisUser');
}
"use strict";

// key =  'thisUser'

function save(key, obj) {
    localStorage.setItem(key, JSON.stringify(obj));
}
"use strict";

function Result() {
    this.time = 0;
    this.err = 0;
    this.errorsLetters = [];
}
'use strict';

function User() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'User';
    var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    this.name = name;
    this.speed = speed;
    this.result = new Result();
}
"use strict";

function UserResult(name, score) {
    this.name = name;
    this.score = score;
}
"use strict";

function addtoResultsArray(array, object) {
    for (var key in object) {
        if (object.hasOwnProperty(key)) {
            array.push(new UserResult(key, object[key]));
        }
    }
}
"use strict";

function arrayToObj(arr) {
    var obj = {};
    arr.map(function (elem) {
        return obj[elem["name"]] = elem["score"];
    });
    return obj;
}
'use strict';

function dateFormat(digits) {
    var msc = void 0,
        sec = void 0,
        min = void 0,
        hour = void 0;

    msc = Math.floor(digits % 1000);
    if (msc > 99) {
        msc = ':' + msc;
    } else if (msc > 9) {
        msc = ':' + '0' + msc;
    } else {
        msc = ':' + '00' + msc;
    }

    sec = Math.floor(digits / 1000 % 60);
    if (sec > 9) {
        sec = sec;
    } else {
        sec = '0' + sec;
    }

    return sec + msc;
}
"use strict";

function filterTopResult(arr) {
    var tmp = [];
    if (arr.length > 10) {
        tmp = arr.slice(0, 9);
        return tmp;
    }
    return arr;
}
"use strict";

function getScore(sec, textLength) {
    return Math.round(60 * textLength / sec);
}
'use strict';

function init() {
    addListeners();
    showModal();
    /*
    задаем дефолтные значения выбору языка
     */
    setKeyboardLetters(appData.currentSetting.setKeyboard(), keyboardButtons);

    /*
      добавляет текст в  typable
    */
    fillTypableChars(typableChars, appData.currentSetting.setTypingText());
    hideTypeElements(typableChars, appData.currentSetting.setTypingText());
    console.log('1 ' + appData.userCurrent.score);
    appData.userSaved = load('thisUser');

    if (appData.userSaved) {
        appData.userCurrent.id = appData.userSaved.id;
        appData.userCurrent.name = appData.userSaved.name;
        appData.userCurrent.score = appData.userSaved.score;
        console.log('2 ' + appData.userCurrent.score);
        appData.userCurrent.restID = appData.userSaved.restID;
        appData.records[appData.userCurrent.name] = appData.userCurrent.score;
        sbmt.removeEventListener('click', addUser);
        hideElem(sectionUser);
        appData.userCurrent.id = 'id-' + appData.userCurrent.name;
        getRESTIdUser();
    } else {
        console.log('3 ' + appData.userCurrent.score);
        appData.records[appData.userCurrent.name] = appData.userCurrent.score;
    }

    readREST();
}
"use strict";

function setIdRESTByName(arr) {
    arr.map(function (elem) {
        if (elem.name === appData.userCurrent.name) {
            appData.userCurrent.restID = elem["id"];
        }
    });
}
"use strict";

function sortByScore(arr) {
    arr.sort(function (a, b) {
        return b.score - a.score;
    });
}
"use strict";

function createREST(obj) {
    var createUrl = appData.url + "?action=1&name=" + obj.name + "&score=" + obj.score;
    console.log(createUrl);

    fetch(createUrl, {
        metod: "post"
    }).catch(function (error) {
        console.log('CreateREST: Fetch Error :-S', error);
    });
}
"use strict";

function deleteREST(obj) {
    var updateUrl = appData.url + "?action=3$id=" + obj.restID;
    // http://fecore.net.ua/rest/?action=3$id=63
    // http://fecore.net.ua/rest/?action=3&id=63
    fetch(updateUrl, {
        metod: "post"
    }).catch(function (error) {
        console.log('deleteREST: Fetch Error : ', error);
    });
}
"use strict";

function getRESTIdUser() {
    fetch(appData.url, {
        metod: "get"
    }).then(function (response) {
        var json = response.json();
        if (response.status >= 200 && response.status < 300) {
            return json;
        } else {
            return error;
        }
    }).then(function (json) {
        setIdRESTByName(json);
    }).catch(function (error) {
        console.log('Fetch Error :-S', error);
    });
}
"use strict";

function readREST() {
    fetch(appData.url, {
        metod: "get"
    }).then(function (response) {
        var json = response.json();
        if (response.status >= 200 && response.status < 300) {
            return json;
        } else {
            return error;
        }
    }).then(function (json) {
        var tmp = arrayToObj(json);
        // если список больше 10, то сохраним userRec
        var userRec = appData.records;
        appData.records = Object.assign(appData.records, tmp);

        addtoResultsArray(appData.results, appData.records);
        sortByScore(appData.results);
        // получить список максимум из 10-ти топ результатов
        filterTopResult(appData.results);

        appData.records = Object.assign(appData.records, userRec);
        sortByScore(appData.results);

        appData.results.map(function (elem) {
            return addToScoreList(elem.name, elem.score, userListParent);
        });
        // console.log('appData.userCurrent.id = ', appData.userCurrent.id);
        userId = document.getElementById(appData.userCurrent.id);
        paintUserScore();
    }).catch(function (error) {
        console.log('Fetch Error :-S', error);
    });
}
"use strict";

function updateREST(obj) {

    var updateUrl = appData.url + "?action=2&id=" + obj.restID + "&name=" + obj.name + "&score=" + obj.score;
    console.log(updateUrl);
    fetch(updateUrl, {
        metod: "post"
    }).catch(function (error) {
        console.log('updateREST: Fetch Error : ', error);
    });
}
"use strict";

function activeBtn() {
    languageButtons.style.opacity = 1;
    sbmt.style.opacity = 1;
    btnShow.style.opacity = 1;
    btnTextAdding.style.opacity = 1;
    beginButton.style.opacity = 1;
}
'use strict';

// addToList
function addToScoreList(name, score, parent) {
    var li = document.createElement('li');
    var pName = document.createElement('p');
    var pScore = document.createElement('p');
    li.className = 'user-list__item';
    pName.className = 'user-list__name';
    pName.id = 'id-' + name;
    pScore.className = 'user-list__score';
    pName.textContent = name;
    pScore.textContent = score;
    li.appendChild(pName);
    li.appendChild(pScore);
    parent.appendChild(li);
}
"use strict";

function desactiveBtn() {
    languageButtons.style.opacity = 0.5;
    sbmt.style.opacity = 0.5;
    btnShow.style.opacity = 0.5;
    btnTextAdding.style.opacity = 0.5;
    beginButton.style.opacity = 0.5;
}
'use strict';

function errorTypeSymbol() {
    typableChars[appData.currentType.position].classList.add('typable__char--error');
    errors.textContent = appData.currentType.errors;
}
"use strict";

/*
 Заполнение TYPABLE AREA текстом для набора
 */
function fillTypableChars(arr, str) {
  Array.from(arr, function (elem, i) {
    return elem.textContent = str[i];
  });
}
'use strict';

/*
   hideTextArea, modal
 */
function hideElem(elem) {
    elem.style.display = 'none';
}
'use strict';

/*
  Скрытие элементов без текста
 */

function hideTypeElements(arr, str) {
    Array.from(arr, function (elem, i) {
        if (i < str.length) {
            elem.classList.remove('hide');
            elem.textContent = str[i];
        } else {
            elem.classList.add('hide');
        }
        elem.classListadd = 'hide';
    });
}
'use strict';

/*
   Подсветка клавиатуры: клавиша, которую следует нажать.
 */

function lightButton(charText) {
    Array.from(keyboardButtons, function (elem) {
        if (elem.classList.contains('keyboard__btn--active')) {
            elem.classList.remove('keyboard__btn--active');
        }
        if (elem.textContent === charText) {
            elem.classList.add('keyboard__btn--active');
        }
    });
}
'use strict';

function nextTypeSymbol() {
    // область набора
    // console.log(typableChars[appData.currentType.position].textContent);
    typableChars[appData.currentType.position].classList.add('typable__char--success');
    typableChars[appData.currentType.position].classList.remove('typable__char--current');
    typableChars[++appData.currentType.position].classList.add('typable__char--current');

    // область клавиатуры

}
"use strict";

function paintUserScore() {
    userId.style.color = "#03A9F4";
}
'use strict';

function restoreView() {
    appData.currentType.position = 0;
    // remove old
    Array.from(keyboardButtons, function (elem) {
        elem.classList.remove('keyboard__btn--active');
        // elem.classList.remove('keyboard__btn--active');
    });
    Array.from(typableChars, function (elem) {
        elem.classList.remove('typable__char--error');
        elem.classList.remove('typable__char--success');
        elem.classList.remove('typable__char--current');
    });
    // default
    typableChars[0].classList.add('typable__char--current');
    // let currentChar = appData.typingText[appData.currentSetting.lang];
    // console.log()
    lightButton(appData.typingText[appData.currentSetting.lang][0]);
    // keyboardButtons[0].classList.add('keyboard__btn--active');
}
"use strict";

/*
  Запонение клавиатруы символами выбранного языка
 */

function setKeyboardLetters(language, buttons) {
    for (var i = 0, limit = buttons.length; i < limit; i = i + 1) {
        buttons[i].textContent = language[i];
    }
}
'use strict';

function setNewPhrase(event) {
    event.preventDefault();
    console.log('setNewPhrase');
    var lng = 'en';

    Array.from(radioLang, function (elem) {
        if (elem.checked) {
            lng = elem.value;
        }
    });

    appData.typingText[lng] = elemTextArea.value.toLocaleLowerCase();

    hideElem(wrpTextArea);

    /* ================== меняем раскладку клавиатуры ================*/
    setKeyboardLetters(appData.currentSetting.setKeyboard(), keyboardButtons);
    /* =================  добавляет текст в  typable ====================== */
    var text = appData.currentSetting.setTypingText();

    // подсветка текущей буквы
    lightButton(text[0]);

    fillTypableChars(typableChars, text);
    hideTypeElements(typableChars, text);
}
'use strict';

function showElem(elem) {
    elem.style.display = 'block';
}
'use strict';

function showModal() {
    modal.style.transform = 'translateY(-25%)';
    modalP.textContent = 'PRESS BUTTON "START TYPE"';
}
"use strict";

function showTextArea() {
  showElem(wrpTextArea);
}
"use strict";

function showTimer(txt) {
    clock.textContent = txt;
}
'use strict';

function updateListByScore() {
    // console.log('updateListByScore');
    var userListScores = document.querySelectorAll('.user-list__item');
    var tmp = Array.from(userListScores);
    tmp.sort(function (a, b) {
        return b.lastChild.textContent - a.lastChild.textContent;
    });
    Array.from(userListScores, function (elem) {
        return elem.remove();
    });
    tmp.map(function (elem) {
        return userListParent.appendChild(elem);
    });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
